using Sandbox.Game.EntityComponents;
using Sandbox.ModAPI.Ingame;
using Sandbox.ModAPI.Interfaces;
using SpaceEngineers.Game.ModAPI.Ingame;
using System.Collections.Generic;
using System.Collections;
using System.Linq;
using System.Text;
using System;
using VRage.Collections;
using VRage.Game.Components;
using VRage.Game.GUI.TextPanel;
using VRage.Game.ModAPI.Ingame.Utilities;
using VRage.Game.ModAPI.Ingame;
using VRage.Game.ObjectBuilders.Definitions;
using VRage.Game;
using VRage;
using VRageMath;

namespace IngameScript
{
	partial class Program : MyGridProgram
	{
		//START
		IMyTextSurfaceProvider solarLcd;
		IMySolarPanel solarU;
		IMySolarPanel solar0;
		IMySolarPanel solar180;
		IMySolarPanel solar270;
		IMySolarPanel solar90;
		IMyMotorAdvancedStator rotor_vert;
		IMyMotorAdvancedStator rotor_hor;
		public Program()
		{
			Runtime.UpdateFrequency = UpdateFrequency.Update100;
			solarU = GridTerminalSystem.GetBlockWithName("solarU") as IMySolarPanel;
			solar0 = GridTerminalSystem.GetBlockWithName("solar0") as IMySolarPanel;
			solar180 = GridTerminalSystem.GetBlockWithName("solar180") as IMySolarPanel;
			solar270 = GridTerminalSystem.GetBlockWithName("solar270") as IMySolarPanel;
			solar90 = GridTerminalSystem.GetBlockWithName("solar90") as IMySolarPanel;
			solarLcd = GridTerminalSystem.GetBlockWithName("solarLcd") as IMyTextSurfaceProvider;
			rotor_vert = GridTerminalSystem.GetBlockWithName("rotor_vert") as IMyMotorAdvancedStator;
			rotor_hor = GridTerminalSystem.GetBlockWithName("rotor_hor") as IMyMotorAdvancedStator;
		}
	
		//Only for LCD display, not for function
		int solar_u_o = 0;
		int solar_n_o = 0;
		int solar_s_o = 0;
		int solar_w_o = 0;
		int solar_e_o = 0;
		
		
		double solar_max = 0;
		double x = 0;
		double y = 0;
		float angle_vert_goal = 0;
		float angle_vert_now = 0;
		float angle_hor_goal = 0;
		float angle_hor_now = 0;
		float rotor_vert_vel = 0;
		float rotor_hor_vel = 0;

		public void Main(string argument, UpdateType updateSource)

		{
			solar_max = Math.Max(Math.Max(Math.Max(solar0.MaxOutput, solar180.MaxOutput), solar270.MaxOutput), solar90.MaxOutput);
			solar_u_o = Convert.ToInt32(solarU.MaxOutput / 0.0016);
			solar_n_o = Convert.ToInt32(solar0.MaxOutput / 0.0016);
			solar_s_o = Convert.ToInt32(solar180.MaxOutput / 0.0016);
			solar_w_o = Convert.ToInt32(solar270.MaxOutput / 0.0016);
			solar_e_o = Convert.ToInt32(solar90.MaxOutput / 0.0016);
			y = solar90.MaxOutput - solar270.MaxOutput;
			x = solar0.MaxOutput - solar180.MaxOutput;
			angle_vert_goal = Convert.ToSingle(Math.Atan2(y, x));

			//This part is to make shure the angle of the sun is not negative from the Atan2 function
			if (angle_vert_goal < 0)
			{
				angle_vert_goal = angle_vert_goal + Convert.ToSingle(Math.PI * 2);
			}

			angle_vert_now = rotor_vert.Angle;
			rotor_vert.TargetVelocityRPM = rotor_vert_vel;

			angle_hor_now = rotor_hor.Angle;
			rotor_hor.TargetVelocityRPM = rotor_hor_vel;

			angle_hor_goal = Convert.ToSingle(solarU.MaxOutput / (solar_max + solarU.MaxOutput) * Math.PI / 2);









			solarLcd.GetSurface(0).WriteText(
				"Efficiency Up: " + solar_u_o.ToString() + "%\n" +
				"Efficiency 0: " + solar_n_o.ToString() + "%\n" +
				"Efficiency 180: " + solar_s_o.ToString() + "%\n" +
				"Efficiency 270: " + solar_w_o.ToString() + "%\n" +
				"Efficiency 90: " + solar_e_o.ToString() + "%\n");
			


			if (angle_vert_goal - angle_vert_now < 0.1 && angle_vert_goal - angle_vert_now > -0.1)
            {
				rotor_vert_vel = 0;
            }

			else if (angle_vert_goal < angle_vert_now)
			{
				rotor_vert_vel = -0.5F;
			}
			else if (angle_vert_goal > angle_vert_now)
            {
				rotor_vert_vel = 0.5F;
            }


			if (angle_hor_goal - angle_hor_now < 0.1 && angle_hor_goal - angle_hor_now > -0.1)
			{
				rotor_hor_vel = 0;
			}

			else if (angle_hor_goal < angle_hor_now)
			{
				rotor_hor_vel = -0.5F;
			}
			else if (angle_hor_goal > angle_hor_now)
			{
				rotor_hor_vel = 0.5F;
			}
		}

		//STOP
	}
}


// Använd foreach loop för att räkna ut vinkeln
// Antagligen behöver vinkeln minska med 360 om den går över 360. 
//Lets face it, jag kommer behöva räkna med pi och radianer
